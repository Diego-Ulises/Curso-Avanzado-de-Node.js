Estructura básica de un módulo de Node.js
Para empezar con el proyecto vamos a crear un módulo de Node.js, con sus respectivas pruebas unitarias. El módulo de Persistencia en Bases de Datos.

Vamos a crear el directorio del proyecto y vamos a utilizar un patrón de mono repo, donde tenemos un único repositorio de Git y varios proyectos adentro.

Un módulo de Node por lo general tiene un archivo que se llama package.json, que tiene la metadata del módulo. Este archivo se puede crear a mano o utilizando npm con una herramienta que nos permite crearlo automáticamente.

Para empezar a implementar nuestro módulo creamos el archivo index.js y nos vamos a Visual Studio Code, donde podemos ver nuestros archivos y empezar a trabajar con ellos. Una buena práctica es crear el archivo README.md con instrucciones de instalación y cómo contribuir al proyecto. Recuerda que este es el archivo de documentación de tu proyecto.

Como otra buena práctica utilizaremos JavaScript en modo estricto, para empezar a definir la forma básica del módulo. La forma de escribir el objeto que utilizamos en el código es de ECMAScript 2016.

Definición de entidades de base de datos
Lo primero que tenemos que hacer es definir las entidades de las bases de datos que vamos a utilizar. En nuestro proyecto vamos a usar PostgreSQL, una base de datos relacional.

El Agente va a conectarse al servidor en tiempo real y cada cierto tiempo va a reportar una métrica.
La Métrica es cualquier valor que tiene un tipo, que va a ser almacenado en la base de datos.

Implementación de modelos con sequelize
Sequelize es un modelo de programación de mapeo de objeto-relacional basado en promesas, para Node.js.

Dos tipos de objetos: modelos nativos de sequelize y servicios.

Singleton es un objeto que solo tiene una instancia. Cada vez que llamemos a una función no va a crear múltiples instancias.

Implementación de script de inicialización de base de datos

sudo -u postgres -i
psql postgres
CREATE ROLE platzi WITH LOGIN PASSWORD 'platzi';
CREATE DATABASE platziverse;
GRANT ALL PRIVILEGES ON DATABASE platziverse TO platzi;
\quits
exit

npm i debug --save

Cómo hacer Mocks y Stubs con Sinon
Vamos a crear unos servicios que van a utilizar unos modelos, y estos son los que se van a conectar a la base de datos. Sequelize se encarga de probar los modelos.

npm install --save-dev sinon

npm install proxyquire --save-dev