Definición de un Broker de Mensajería
Platziverse MQTT va a ser el servidor encargado de recibir los mensajes de los agentes de monitoreo y re-distribuírlos a los agentes que estarán “escuchando” o a la espera de esos mensajes.

Un “message broker” es decir un intermediario que se encargará de recibir un mensaje y redistribuírlo para esto nosotros vamos a implementar el protocolo MQTT para que realice esta función en nuestro servidor por las ventajas que este ofrece al estar optimizado para aplicaciones de IoT este protocolo “máquina a máquina” utiliza un ancho de banda muy bajo y puede funcionar con conexiones móviles y situaciones de ese estilo dónde el ancho de banda es limitado en muchas ocaciones y el consumo de datos debe ser lo más bajo posible.

Definición de los tipos de mensajes
Antes de empezar con la implementación de nuestro servidor de MQTT debemos definir el tipo de mensajes que vamos a utilizar.

Crearemos un archivo readme en nuestra carpeta “platziverse-mqtt.”

Vamos a utilizar un eventoopara cuando el usuario se conecte para esto utilizamos “agent/connected” además utilizaremos “agent/disconnected” para cuando el agente se deconecte y por último un evento para cuando nos envíen un mensaje “agent/message”.

Implementación del servidor MQTT
Vamos a comenzar con la implementación de nuestro servidor de MQTT.

Por defecto el puerto donde va a correr el servidor MQTT es el 8083.

npm init
npm i --save-dev standard nodemon
npm i --save debug mosca redis chalk
npm run start-dev

Cómo recibir mensajes
Ya tenemos implementado el servidor, pero hasta ahora no sabemos cómo recibir mensajes, ya sea cuando un cliente se conecta, o cuando hay un mensaje.

npm install -g mqtt
npx mqtt -v

En otra terminal: 
    mqtt pub -t 'agent/message' -h localhost -m 'Hello'
