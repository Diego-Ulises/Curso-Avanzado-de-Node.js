Definición de un Broker de Mensajería
Platziverse MQTT va a ser el servidor encargado de recibir los mensajes de los agentes de monitoreo y re-distribuírlos a los agentes que estarán “escuchando” o a la espera de esos mensajes.

Un “message broker” es decir un intermediario que se encargará de recibir un mensaje y redistribuírlo para esto nosotros vamos a implementar el protocolo MQTT para que realice esta función en nuestro servidor por las ventajas que este ofrece al estar optimizado para aplicaciones de IoT este protocolo “máquina a máquina” utiliza un ancho de banda muy bajo y puede funcionar con conexiones móviles y situaciones de ese estilo dónde el ancho de banda es limitado en muchas ocaciones y el consumo de datos debe ser lo más bajo posible.

Definición de los tipos de mensajes
Antes de empezar con la implementación de nuestro servidor de MQTT debemos definir el tipo de mensajes que vamos a utilizar.

Crearemos un archivo readme en nuestra carpeta “platziverse-mqtt.”

Vamos a utilizar un eventoopara cuando el usuario se conecte para esto utilizamos “agent/connected” además utilizaremos “agent/disconnected” para cuando el agente se deconecte y por último un evento para cuando nos envíen un mensaje “agent/message”.

Implementación del servidor MQTT
Vamos a comenzar con la implementación de nuestro servidor de MQTT.

Por defecto el puerto donde va a correr el servidor MQTT es el 8083.

npm init
npm i --save-dev standard nodemon
npm i --save debug mosca redis chalk
npm run start-dev

Cómo recibir mensajes
Ya tenemos implementado el servidor, pero hasta ahora no sabemos cómo recibir mensajes, ya sea cuando un cliente se conecta, o cuando hay un mensaje.

npm install -g mqtt
npx mqtt -v

En otra terminal: 
    mqtt pub -t 'agent/message' -h localhost -m 'Hello'

Cómo integrar el servidor MQTT con la base de datos
Hay muchas formas de publicar nuestro módulo. En este caso vamos a referenciarlo como un módulo local.

Reto #3:
¿Ves un patrón aquí? - El módulo de configuración se reutiliza del script de configuración de la base de datos, puedes volverlo un módulo standalone? cómo lo llamarías?

npm i

Cómo almacenar la información del agente y reportar el agente conectado
Para implementar la persistencia de los mensajes en la base de datos necesitamos tener una referencia de todos los agentes que tenemos conectados. Tenemos que crear un mapa de JavaScript.
Cada vez que un cliente se conecte vamos a capturar el ID y la información del agente. Por ahora no conocemos la información porque no hemos recibido el primer mensaje, así que más adelante le vamos a setear la información.

Después vamos a empezar a trabajar con los mensajes que publican en nuestro servidor. Para eso vamos a optener el topic y hacer un switch.
El switch es una estructura de control de JS que permite ejecutar un código.

Cómo almacenar la información de las métricas
Después de notificar que el agente se conectó exitosamente vamos a almacenar las métricas. Para esto, recordemos que estamos recibiendo un arreglo que contiene las métricas, y vamos a iterar sobre ese arreglo, para obtener cada uno de los objetos que contiene.

¿Cómo identificar cuando alguien se desconecta?

Tenemos un evento que se llama clientDisconnected. Ahí vamos a obtener un agente del mapa. Cuando el cliente se desconecta vamos a ver si tenemos un agente, si lo tenemos lo podemos marcar como desconectado y almacenarlo en la base de datos.

Probando el servidor MQTT (Ejemplo con mqtt client)
Ahora vamos a probar que efectivamente nuestra información se esté guardando en la base de datos. El servidor MQTT es el encargo de enviar el agentConnected y agentDisconnected. Vamos a enviar un agentMessage y el mensaje que vamos a enviar será un objeto JSON con la información del agente y la información de las métricas. Un objeto y un arreglo, respectivamente.

Reto #4:
Actualmente las métricas se almacenan en serie en la base de datos, refactorizar para que se almacenen en paralelo.

mqtt pub -t 'agent/message' -m '{"agent": {"uuid": "yyy", "name": "platzi", "username": "platzi", "pid": 10, "hostname": "platzibogota"}, "metrics": [{"type": "memory", "value": "1001"}, {"type": "temp", "value": "33"}]}'

psql -h localhost -U platzi platziverse

con q saltas (END)
